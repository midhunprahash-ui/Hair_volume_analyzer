{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red24\green24\blue24;\red193\green193\blue193;
\red67\green192\blue160;\red89\green138\blue67;\red212\green214\blue154;\red202\green202\blue202;\red194\green126\blue101;
\red140\green211\blue254;\red167\green197\blue152;\red70\green137\blue204;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c12157\c12157\c12157;\cssrgb\c80000\c80000\c80000;
\cssrgb\c30588\c78824\c69020;\cssrgb\c41569\c60000\c33333;\cssrgb\c86275\c86275\c66667;\cssrgb\c83137\c83137\c83137;\cssrgb\c80784\c56863\c47059;
\cssrgb\c61176\c86275\c99608;\cssrgb\c70980\c80784\c65882;\cssrgb\c33725\c61176\c83922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 torch\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 ultralytics\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 YOLO\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 # Load trained model\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 model\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf5 \strokec5 YOLO\cf4 \strokec4 (\cf9 \strokec9 "best.pt"\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 # Open webcam\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 cap\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \strokec4 .\cf5 \strokec5 VideoCapture\cf4 \strokec4 (\cf11 \strokec11 0\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 while\cf4 \strokec4  \cf10 \strokec10 cap\cf4 \strokec4 .\cf7 \strokec7 isOpened\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf10 \strokec10 ret\cf4 \strokec4 , \cf10 \strokec10 frame\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 cap\cf4 \strokec4 .\cf7 \strokec7 read\cf4 \strokec4 ()\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf12 \strokec12 not\cf4 \strokec4  \cf10 \strokec10 ret\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 print\cf4 \strokec4 (\cf9 \strokec9 "Failed to grab frame"\cf4 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\
\cb3     \cf6 \strokec6 # Perform inference\cf4 \cb1 \strokec4 \
\cb3     \cf10 \strokec10 results\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf7 \strokec7 model\cf4 \strokec4 (\cf10 \strokec10 frame\cf4 \strokec4 )\cb1 \
\
\cb3     \cf6 \strokec6 # Check if masks exist\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf10 \strokec10 results\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ].masks \cf12 \strokec12 is\cf4 \strokec4  \cf12 \strokec12 not\cf4 \strokec4  \cf12 \strokec12 None\cf4 \strokec4 :\cb1 \
\cb3         \cf10 \strokec10 mask\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 results\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ].masks.data[\cf11 \strokec11 0\cf4 \strokec4 ].cpu().numpy() \cf8 \strokec8 *\cf4 \strokec4  \cf11 \strokec11 255\cf4 \strokec4   \cf6 \strokec6 # Convert to NumPy and scale\cf4 \cb1 \strokec4 \
\
\cb3         \cf6 \strokec6 # Ensure mask is the same size as frame\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 mask\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 resize\cf4 \strokec4 (\cf10 \strokec10 mask\cf4 \strokec4 , (\cf10 \strokec10 frame\cf4 \strokec4 .\cf10 \strokec10 shape\cf4 \strokec4 [\cf11 \strokec11 1\cf4 \strokec4 ], \cf10 \strokec10 frame\cf4 \strokec4 .\cf10 \strokec10 shape\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ]))\cb1 \
\
\cb3         \cf6 \strokec6 # Convert grayscale mask to 3 channels if needed\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 len\cf4 \strokec4 (\cf10 \strokec10 mask\cf4 \strokec4 .shape) \cf8 \strokec8 ==\cf4 \strokec4  \cf11 \strokec11 2\cf4 \strokec4 :\cb1 \
\cb3             \cf10 \strokec10 mask\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 cvtColor\cf4 \strokec4 (\cf10 \strokec10 mask\cf4 \strokec4 .astype(\cf9 \strokec9 "uint8"\cf4 \strokec4 ), \cf5 \strokec5 cv2\cf4 \strokec4 .\cf10 \strokec10 COLOR_GRAY2BGR\cf4 \strokec4 )\cb1 \
\
\cb3         \cf6 \strokec6 # Ensure data type consistency\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 frame\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 frame\cf4 \strokec4 .\cf7 \strokec7 astype\cf4 \strokec4 (\cf9 \strokec9 "uint8"\cf4 \strokec4 )\cb1 \
\cb3         \cf10 \strokec10 mask\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 mask\cf4 \strokec4 .astype(\cf9 \strokec9 "uint8"\cf4 \strokec4 )\cb1 \
\
\cb3         \cf6 \strokec6 # Overlay mask on frame\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 overlay\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 addWeighted\cf4 \strokec4 (\cf10 \strokec10 frame\cf4 \strokec4 , \cf11 \strokec11 1\cf4 \strokec4 , \cf10 \strokec10 mask\cf4 \strokec4 , \cf11 \strokec11 0.5\cf4 \strokec4 , \cf11 \strokec11 0\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 print\cf4 \strokec4 (\cf9 \strokec9 "No segmentation detected"\cf4 \strokec4 )\cb1 \
\cb3         \cf10 \strokec10 overlay\cf4 \strokec4  \cf8 \strokec8 =\cf4 \strokec4  \cf10 \strokec10 frame\cf4 \strokec4   \cf6 \strokec6 # Show original frame if no segmentation\cf4 \cb1 \strokec4 \
\
\cb3     \cf6 \strokec6 # Show output\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 imshow\cf4 \strokec4 (\cf9 \strokec9 "Hair Segmentation"\cf4 \strokec4 , \cf10 \strokec10 overlay\cf4 \strokec4 )\cb1 \
\
\cb3     \cf6 \strokec6 # Press 'q' to exit\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf5 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 waitKey\cf4 \strokec4 (\cf11 \strokec11 1\cf4 \strokec4 ) \cf8 \strokec8 &\cf4 \strokec4  \cf12 \strokec12 0x\cf11 \strokec11 FF\cf4 \strokec4  \cf8 \strokec8 ==\cf4 \strokec4  \cf7 \strokec7 ord\cf4 \strokec4 (\cf9 \strokec9 'q'\cf4 \strokec4 ):\cb1 \
\cb3         \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 # Release resources\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 cap\cf4 \strokec4 .\cf7 \strokec7 release\cf4 \strokec4 ()\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 cv2\cf4 \strokec4 .\cf7 \strokec7 destroyAllWindows\cf4 \strokec4 ()\cb1 \
}